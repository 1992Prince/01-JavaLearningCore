package org.list;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class P8_ImmutableList {

    public static void main(String[] args) {

        /**
         *
         * ‚úÖ Creating Immutable List in Java 8
         * üîπ 1. Using Collections.unmodifiableList()
         */

        List<String> modifiable = new ArrayList<>();
        modifiable.add("A");
        modifiable.add("B");

        List<String> immutable = Collections.unmodifiableList(modifiable);
        // ‚ö†Ô∏è Warning: If you modify modifiable, the changes reflect in immutable too ‚Äî it‚Äôs a shallow wrapper.
        // ‚ùå below will throw UnsupportedOperationException:
        // immutable.add("C"); // ‚ùå
        // immutable.set(0, "Z"); // ‚ùå

        System.out.println();

        /**
         * ‚úÖ Immutable List in Java 9+
         * Java 9 introduced factory methods in List interface itself
         * üîπ 1. Using List.of(...)
         *
         * Properties
         * - Immutable
         * - Fixed-size
         * - No nulls allowed (NullPointerException if you try)
         * - ‚ùå These will throw UnsupportedOperationException:
         * immutable2.add("X"); // ‚ùå
         * immutable2.remove("A"); // ‚ùå
         */

        List<String> immutable2 = List.of("A", "B", "C");

        // ‚ùå Nulls not allowed:
        // List<String> list = List.of("A", null); // ‚ùå Throws NullPointerException

        System.out.println();

        /**
         * ‚úÖ Convert List.of() to Modifiable List
         *
         * also u can do
         * List<String> modifiableList = new ArrayList<>(List.of("A", "B", "C"));
         */
        List<String> immutableList = List.of("A", "B", "C");
        // ‚úÖ Create modifiable list from it
        List<String> modifiableList = new ArrayList<>(immutableList);
        // Now you can modify it
        modifiableList.add("D");
        modifiableList.remove("B");
        modifiableList.set(0, "Z");

        System.out.println(modifiableList); // [Z, C, D]

        System.out.println();
        System.out.println("------------‚úÖ 1. Arrays.asList() ‚Äì Java SE 5+----------");
        System.out.println();

        List<String> list = Arrays.asList("a", "b", "c");

        /**
         * üîé Features:
         * Returns a fixed-size list backed by the original array.
         * You can update elements, but can‚Äôt add/remove.
         * Allows null values.
         * List is mutable, but size is fixed.
         */
        // ‚ùó Modifying Example:
        list.set(0, "x");       // ‚úÖ allowed
        // list.add("d");          // ‚ùå throws UnsupportedOperationException
        // list.remove(1);         // ‚ùå same error





    }
}
