âœ… Format Weâ€™ll Follow for Every Concept:

âœ… Problem Statement (Real-world style)
ðŸŽ¯ OOP Concept To Learn
ðŸ§© Class Diagram / Design Plan
ðŸ”¨ Code Implementation (With Best Practices & Java 8+ features)
ðŸ§  Conclusion: What We Learned
ðŸ¤– Where & How to Use in Automation Framework

Letâ€™s start with OOP Day 1 â†’ Class & Object

ðŸš© Problem Statement

Design a basic Bank Account system where:
A user can deposit, withdraw, and check balance.
There can be multiple accounts (e.g., Ravi, Meena, etc.).
Balance should always be protected from direct manipulation.

ðŸŽ¯ OOP Concept to Learn

Class & Object
Instance variables & methods
Object-based memory model
Real-world object modeling

ðŸ§© Class Design
+----------------------+
|     BankAccount      |
+----------------------+
| - accountHolder: String
| - balance: double     |
+----------------------+
| + deposit(amount)     |
| + withdraw(amount)    |
| + getBalance()        |
| + setHolder(name)     |
| + getHolder()         |
+----------------------+

âœ… Best Practices Used
| Principle           | Explanation                                                    |
| ------------------- | -------------------------------------------------------------- |
| âœ… Encapsulation     | Private fields, public methods                                 |
| âœ… Constructor       | Initialized object with a name                                 |
| âœ… Validation        | Basic checks in deposit/withdraw                               |
| âœ… Java 8+ readiness | Modern coding practices (clear constructor, guard conditions)  |
| âœ… Separation        | Logic inside BankAccount class only, used via object in `Main` |

ðŸ§  Conclusion: What We Learned
Class is blueprint, Object is instance.
Data (balance, holder) is tightly coupled to behavior (deposit, withdraw).
You can create multiple isolated objects, each with its own state.
Data hiding and method access help model real-world safely.

ðŸ¤– Automation Framework Use-Case
| Concept in Project        | In Framework                       |
| ------------------------- | ---------------------------------- |
| `BankAccount` class       | `LoginPage`, `DriverManager`, etc. |
| `deposit()`, `withdraw()` | `login()`, `clickButton()`, etc.   |
| `acc1`, `acc2`            | Different page objects             |
| `getBalance()`            | `getTitle()`, `getText()`          |
| `private balance`         | `private WebDriver driver`         |
