Finding the middle value in Binary Search -
------------------------------------------

**************************************************
We usually use formula - middle = (start + end)/2
**************************************************

above formula is correct but if suppose start and end values are very big then
(start + end) can overflow like they become more very big numbers

like very big int value + very big int value can become long [overflow case]

So to avoid above issue, use below formula wch is just another way of writing
above formula -

**********************************
middle = left + [(right-left)/2]
***********************************

this -> right - left will never overflow

This approach will help u to solve problem -
https://leetcode.com/problems/guess-number-higher-or-lower/description/

here we need to use pre-defined api guess(int num)-
here 1 to n will be our sample space for binary search
here mid element will be guessed element wch we will pass to guess(mid)
guess fun will return -1, 1 and 0
instead of checking picked > mid or picked < mid, guess will return 0 if
mid == picked num or
return -1 if guessed mid num > picked num and
return 1 if guessed mid num < picked num

Prince solution
--------------------------------------------------

public int guessNumber(int n) {

        int start = 1;
        int end = n;

        while(start <= end){
            int mid = start + (end - start)/2;
            int res = guess(mid);

            if(res == 0){
                return mid;
            }else if(res == 1){
                start = mid + 1;
            }else{
                end = mid - 1;
            }
        }

        return 0;
    }